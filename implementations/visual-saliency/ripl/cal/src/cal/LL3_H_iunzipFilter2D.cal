package cal;
actor LL3_H_iunzipFilter2D () int (size = 16) In1 ==> int (size = 16) Out1, int (size = 16) Out2 : uint (size = 16) bufferSize = 64 * 2 + 3 ;
 int (size = 16) buffer [bufferSize] ;
 int (size = 16) idx := 0 ;
 int (size = 16) populatePtr := 0 ;
 int (size = 16) processedRows := 0 ;
 uint (size = 32) consumed := 0 ;
 uint (size = 16) midPtr := 0 ;
 bool isEven := true ;
 function max (int (size = 16) i, int (size = 16) j) --> int (size = 16) : if i > j then i else j end end function applyKernel1 (int (size = 16) p1, int (size = 16) p2, int (size = 16) p3, int (size = 16) p4, int (size = 16) p5, int (size = 16) p6, int (size = 16) p7, int (size = 16) p8, int (size = 16) p9) --> int (size = 16) var int (size = 16) result = ((p2 + p6)) >> 2 : max (0, result) end function applyKernel2 (int (size = 16) p1, int (size = 16) p2, int (size = 16) p3, int (size = 16) p4, int (size = 16) p5, int (size = 16) p6, int (size = 16) p7, int (size = 16) p8, int (size = 16) p9) --> int (size = 16) var int (size = 16) result = ((p2 - p6)) >> 1 : max (0, result) end function myMod (int (size = 16) x) --> int (size = 16) : if x > 2 * bufferSize - 1 then x - 2 * bufferSize else if x > bufferSize - 1 then x - bufferSize else x end end end populateBuffer : action In1 : [x] ==> guard populatePtr < 64 + 3 do buffer [populatePtr] := x;
consumed := consumed + 1;
populatePtr := populatePtr + 1;
end donePopulateBuffer : action ==> guard populatePtr = 64 + 3 do populatePtr := 0;
end topLeft : action In1 : [token] ==> Out1 : [v] var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [idx] ,
 int (size = 16) p5 = buffer [idx] ,
 int (size = 16) p6 = buffer [myMod (idx + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + (64 - 1))] ,
 int (size = 16) p8 = buffer [myMod (idx + (64 - 1))] ,
 int (size = 16) p9 = buffer [myMod (idx + 64)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [consumed] := token;
idx := myMod (idx + 1);
midPtr := midPtr + 1;
consumed := consumed + 1;
end topRow : action In1 : [token] ==> Out1 : [v] guard midPtr < 63 var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 2)] ,
 int (size = 16) p3 = buffer [myMod (idx + 3)] ,
 int (size = 16) p4 = buffer [idx] ,
 int (size = 16) p5 = buffer [myMod (idx + 2)] ,
 int (size = 16) p6 = buffer [myMod (idx + 3)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + (64 + 1))] ,
 int (size = 16) p9 = buffer [myMod (idx + (64 + 2))] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
consumed := consumed + 1;
idx := myMod (idx + 1);
midPtr := midPtr + 1;
processedRows := processedRows + 1;
end topRight : action In1 : [token] ==> Out1 : [v] guard midPtr = 63 var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [idx] ,
 int (size = 16) p5 = buffer [myMod (idx + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + (64 + 1))] ,
 int (size = 16) p9 = buffer [myMod (idx + (64 + 2))] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
consumed := consumed + 1;
idx := myMod (idx + 1);
midPtr := 0;
processedRows := 1;
isEven := not isEven;
end midLeft1 : action In1 : [token] ==> Out1 : [v] guard midPtr = 0, processedRows < 127, consumed < 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64)] ,
 int (size = 16) p6 = buffer [myMod (idx + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
consumed := consumed + 1;
idx := myMod (idx + 1);
midPtr := midPtr + 1;
end midLeft2 : action In1 : [token] ==> Out2 : [v] guard midPtr = 0, processedRows < 127, consumed < 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64)] ,
 int (size = 16) p6 = buffer [myMod (idx + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
consumed := consumed + 1;
idx := myMod (idx + 1);
midPtr := midPtr + 1;
end midLeftNoConsume1 : action ==> Out1 : [v] guard midPtr = 0, processedRows < 127, consumed = 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64)] ,
 int (size = 16) p6 = buffer [myMod (idx + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (consumed);
midPtr := midPtr + 1;
end midLeftNoConsume2 : action ==> Out2 : [v] guard midPtr = 0, processedRows < 127, consumed = 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64)] ,
 int (size = 16) p6 = buffer [myMod (idx + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (consumed);
midPtr := midPtr + 1;
end mid1 : action In1 : [token] ==> Out1 : [v] guard midPtr < 63, processedRows < 127, consumed < 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 2)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 2)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
consumed := consumed + 1;
idx := myMod (idx + 1);
midPtr := midPtr + 1;
end mid2 : action In1 : [token] ==> Out2 : [v] guard midPtr < 63, processedRows < 127, consumed < 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 2)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 2)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
consumed := consumed + 1;
idx := myMod (idx + 1);
midPtr := midPtr + 1;
end midNoConsume1 : action ==> Out1 : [v] guard midPtr < 63, consumed = 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 2)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 2)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (idx + 1);
midPtr := midPtr + 1;
end midNoConsume2 : action ==> Out2 : [v] guard midPtr < 63, consumed = 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 2)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 2)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (idx + 1);
midPtr := midPtr + 1;
end midRight1 : action In1 : [token] ==> Out1 : [v] guard midPtr = 63, consumed < 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
idx := myMod (idx + 1);
consumed := consumed + 1;
processedRows := processedRows + 1;
midPtr := 0;
isEven := not isEven;
end midRight2 : action In1 : [token] ==> Out2 : [v] guard midPtr = 63, consumed < 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do buffer [myMod (idx + bufferSize)] := token;
idx := myMod (idx + 1);
consumed := consumed + 1;
processedRows := processedRows + 1;
midPtr := 0;
isEven := not isEven;
end midRightNoConsume1 : action ==> Out1 : [v] guard midPtr = 63, consumed = 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do processedRows := processedRows + 1;
midPtr := 0;
isEven := not isEven;
end midRightNoConsume2 : action ==> Out2 : [v] guard midPtr = 63, consumed = 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 2 * 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 2 * 64 + 1)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do processedRows := processedRows + 1;
midPtr := 0;
isEven := not isEven;
end bottomLeftNoConsume1 : action ==> Out1 : [v] guard midPtr = 0, processedRows = 127, consumed = 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 64)] ,
 int (size = 16) p9 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (idx + 1);
midPtr := midPtr + 1;
end bottomLeftNoConsume2 : action ==> Out2 : [v] guard midPtr = 0, processedRows = 127, consumed = 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [idx] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 64)] ,
 int (size = 16) p9 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (idx + 1);
midPtr := midPtr + 1;
end bottomRowNoConsume1 : action ==> Out1 : [v] guard midPtr < 63, consumed = 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 2)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (idx + 1);
midPtr := midPtr + 1;
end bottomRowNoConsume2 : action ==> Out2 : [v] guard midPtr < 63, consumed = 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 2)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 64 + 2)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do idx := myMod (idx + 1);
midPtr := midPtr + 1;
end bottomRightNoConsume1 : action ==> Out1 : [v] guard midPtr = 63, consumed = 8192, isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) v = applyKernel1 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do processedRows := 0;
idx := 0;
midPtr := 0;
consumed := 0;
isEven := not isEven;
end bottomRightNoConsume2 : action ==> Out2 : [v] guard midPtr = 63, consumed = 8192, not isEven var int (size = 16) p1 = buffer [idx] ,
 int (size = 16) p2 = buffer [myMod (idx + 1)] ,
 int (size = 16) p3 = buffer [myMod (idx + 1)] ,
 int (size = 16) p4 = buffer [myMod (idx + 64)] ,
 int (size = 16) p5 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p6 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p7 = buffer [myMod (idx + 64)] ,
 int (size = 16) p8 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) p9 = buffer [myMod (idx + 64 + 1)] ,
 int (size = 16) v = applyKernel2 (p1, p2, p3, p4, p5, p6, p7, p8, p9) do processedRows := 0;
idx := 0;
midPtr := 0;
consumed := 0;
isEven := not isEven;
end schedule fsm s0 : s0 (populateBuffer) --> s0 ;
 s0 (donePopulateBuffer) --> s1 ;
 s1 (topLeft) --> s2 ;
 s2 (topRow) --> s2 ;
 s2 (topRight) --> s3 ;
 s3 (midLeft1) --> s4 ;
 s3 (midLeft2) --> s4 ;
 s3 (midLeftNoConsume1) --> s4 ;
 s3 (midLeftNoConsume2) --> s4 ;
 s4 (mid1) --> s4 ;
 s4 (mid2) --> s4 ;
 s4 (midNoConsume1) --> s4 ;
 s4 (midNoConsume2) --> s4 ;
 s4 (midRight1) --> s5 ;
 s4 (midRight2) --> s5 ;
 s4 (midRightNoConsume1) --> s5 ;
 s4 (midRightNoConsume2) --> s5 ;
 s5 (midLeft1) --> s4 ;
 s5 (midLeft2) --> s4 ;
 s5 (midLeftNoConsume1) --> s4 ;
 s5 (midLeftNoConsume2) --> s4 ;
 s5 (bottomLeftNoConsume1) --> s6 ;
 s5 (bottomLeftNoConsume2) --> s6 ;
 s6 (bottomRowNoConsume1) --> s6 ;
 s6 (bottomRowNoConsume2) --> s6 ;
 s6 (bottomRightNoConsume1) --> s0 ;
 s6 (bottomRightNoConsume2) --> s0 ;
 end end