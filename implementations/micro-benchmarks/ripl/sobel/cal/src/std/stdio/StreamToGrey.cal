/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Authors:
//  Deepayan Bhowmik <d.bhowmik@hw.ac.uk> 
//  Rob Stewart <R.Stewart@hw.ac.uk>

package std.stdio;
import std.headers.Parameters.*;

actor StreamToGrey() uint(size=8) stream ==> uint(size=8) G : 

	uint(size=32) idx := 0;
	
	getPixValueY.copy: action stream:[y] ==> G:[y] 
	guard
		idx < IM_WIDTH_IN * IM_HEIGHT_IN
	do
		idx := idx + 1;
	end
	
	getPixValueY.done: action ==> 
	guard
		idx = IM_WIDTH_IN * IM_HEIGHT_IN
	do
		idx := 0;
	end
					
	getPixValueUV.copy: action stream:[x] ==>
	guard
		idx < IM_WIDTH_IN * IM_HEIGHT_IN * 2
	do
		idx := idx + 1;
	end
	
	getPixValueUV.done: action ==> 
	guard
		idx = IM_WIDTH_IN * IM_HEIGHT_IN * 2
	do
		idx := 0;
	end	
			
	schedule fsm s0 :			
		s0 (getPixValueY.copy) --> s0;
		s0 (getPixValueY.done) --> s1;
		s1 (getPixValueUV.copy) --> s1;
		s1 (getPixValueUV.done) --> s0;
	end
	
end
