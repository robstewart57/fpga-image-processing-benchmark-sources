/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: 


package data_par;
import image.constants.constants.*;
 
 
actor createOutput_48() uint(size=8) P1, uint(size=8) P2, uint(size=8) P3, uint(size=8) P4, uint(size=8) P5, uint(size=8) P6, uint(size=8) P7, uint(size=8) P8,
uint(size=8) P9, uint(size=8) P10, uint(size=8) P11, uint(size=8) P12, uint(size=8) P13, uint(size=8) P14, uint(size=8) P15, uint(size=8) P16,  
uint(size=8) P17, uint(size=8) P18, uint(size=8) P19, uint(size=8) P20, uint(size=8) P21, uint(size=8) P22, uint(size=8) P23, uint(size=8) P24,  
uint(size=8) P25, uint(size=8) P26, uint(size=8) P27, uint(size=8) P28, uint(size=8) P29, uint(size=8) P30, uint(size=8) P31, uint(size=8) P32, 
uint(size=8) P33, uint(size=8) P34, uint(size=8) P35, uint(size=8) P36, uint(size=8) P37, uint(size=8) P38, uint(size=8) P39, uint(size=8) P40, 
uint(size=8) P41, uint(size=8) P42, uint(size=8) P43, uint(size=8) P44, uint(size=8) P45, uint(size=8) P46, uint(size=8) P47, uint(size=8) P48, 
uint(size=8) R, uint(size=8) G, uint(size=8) B ==> uint(size=8) Rout, uint(size=8) Gout, uint(size=8) Bout :


	/* constants */
	uint(size=16) imageWidth = IM_WIDTH;
	uint(size=16) imageHeight = IM_HEIGHT;
	uint(size=8) fsSize := FS_SIZE;
	uint(size=8) fsHalf := fsSize/2;
	uint(size=8) fsThird := fsSize/3;
	uint(size=8) fsQuart := fsSize/4;
	uint(size=8) FSdiv = 256/fsSize;
	/* output row and buffer windows */
	uint(size=8) outputR [imageWidth*imageHeight];
	uint(size=8) outputG [imageWidth*imageHeight];
	uint(size=8) outputB [imageWidth*imageHeight];

	int(size=16) peaks[fsSize][fsSize][fsSize][3];
	
	
	
	//bufferRows: 
	buildOutput: action R:[ imgR ] repeat imageWidth*imageHeight, G:[ imgG ] repeat imageWidth*imageHeight, B:[ imgB ] repeat imageWidth*imageHeight,
			P1:[ peakStream1 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P2:[ peakStream2 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P3:[ peakStream3 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P4:[ peakStream4 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P5:[ peakStream5 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P6:[ peakStream6 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P7:[ peakStream7 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P8:[ peakStream8 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P9:[ peakStream9 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P10:[ peakStream10 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P11:[ peakStream11 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P12:[ peakStream12 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P13:[ peakStream13 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P14:[ peakStream14 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P15:[ peakStream15 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P16:[ peakStream16 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P17:[ peakStream17 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P18:[ peakStream18 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P19:[ peakStream19 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P20:[ peakStream20 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P21:[ peakStream21 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P22:[ peakStream22 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P23:[ peakStream23 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P24:[ peakStream24 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P25:[ peakStream25 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P26:[ peakStream26 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P27:[ peakStream27 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P28:[ peakStream28 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P29:[ peakStream29 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P30:[ peakStream30 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P31:[ peakStream31 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P32:[ peakStream32 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P33:[ peakStream33 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P34:[ peakStream34 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P35:[ peakStream35 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P36:[ peakStream36 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P37:[ peakStream37 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P38:[ peakStream38 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P39:[ peakStream39 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P40:[ peakStream40 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P41:[ peakStream41 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P42:[ peakStream42 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P43:[ peakStream43 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P44:[ peakStream44 ] repeat (fsSize)*(fsSize)*(fsSize)*3,
			P45:[ peakStream45 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P46:[ peakStream46 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P47:[ peakStream47 ] repeat (fsSize)*(fsSize)*(fsSize)*3, P48:[ peakStream48 ] repeat (fsSize)*(fsSize)*(fsSize)*3
			==> Rout:[outputR] repeat imageWidth*imageHeight, Gout:[outputG] repeat imageWidth*imageHeight, Bout:[outputB] repeat imageWidth*imageHeight
	do
		foreach uint(size=16) i in 0 .. fsThird-1 do
	    	foreach uint(size=16) j in 0 ..fsQuart-1 do
	    		foreach uint(size=16) k in 0 .. fsQuart-1 do
	    			foreach uint(size=8) l in 0 .. 2 do
	    				peaks[i][j][k][l] 								:= peakStream1[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j][k][l]	 					:= peakStream2[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j][k][l] 					:= peakStream3[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsQuart][k][l] 						:= peakStream4[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsQuart][k][l] 				:= peakStream5[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsQuart][k][l] 			:= peakStream6[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsHalf][k][l]		 				:= peakStream7[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsHalf][k][l] 				:= peakStream8[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsHalf][k][l] 				:= peakStream9[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+3*fsQuart][k][l]				 		:= peakStream10[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+3*fsQuart][k][l] 			:= peakStream11[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+3*fsQuart][k][l] 			:= peakStream12[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j][k+fsQuart][l] 						:= peakStream13[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j][k+fsQuart][l]				:= peakStream14[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j][k+fsQuart][l]				:= peakStream15[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsQuart][k+fsQuart][l]				:= peakStream16[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsQuart][k+fsQuart][l] 		:= peakStream17[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsQuart][k+fsQuart][l]	 	:= peakStream18[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsHalf][k+fsQuart][l] 				:= peakStream19[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsHalf][k+fsQuart][l] 		:= peakStream20[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsHalf][k+fsQuart][l] 		:= peakStream21[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+3*fsQuart][k+fsQuart][l]				:= peakStream22[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+3*fsQuart][k+fsQuart][l]		:= peakStream23[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+3*fsQuart][k+fsQuart][l]	:= peakStream24[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j][k+fsHalf][l] 						:= peakStream25[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j][k+fsHalf][l]				:= peakStream26[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j][k+fsHalf][l]				:= peakStream27[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsQuart][k+fsHalf][l]				:= peakStream28[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsQuart][k+fsHalf][l] 		:= peakStream29[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsQuart][k+fsHalf][l]	 	:= peakStream30[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsHalf][k+fsHalf][l] 				:= peakStream31[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsHalf][k+fsHalf][l] 		:= peakStream32[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsHalf][k+fsHalf][l] 		:= peakStream33[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+3*fsQuart][k+fsHalf][l]				:= peakStream34[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+3*fsQuart][k+fsHalf][l]		:= peakStream35[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+3*fsQuart][k+fsHalf][l]	:= peakStream36[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j][k+3*fsQuart][l] 					:= peakStream37[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j][k+3*fsQuart][l]				:= peakStream38[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j][k+3*fsQuart][l]			:= peakStream39[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsQuart][k+3*fsQuart][l]				:= peakStream40[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsQuart][k+3*fsQuart][l] 	:= peakStream41[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsQuart][k+3*fsQuart][l]	:= peakStream42[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+fsHalf][k+3*fsQuart][l] 				:= peakStream43[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+fsHalf][k+3*fsQuart][l] 		:= peakStream44[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+fsHalf][k+3*fsQuart][l] 	:= peakStream45[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i][j+3*fsQuart][k+3*fsQuart][l]			:= peakStream46[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+fsThird][j+3*fsQuart][k+3*fsQuart][l]	:= peakStream47[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    				peaks[i+2*fsThird][j+3*fsQuart][k+3*fsQuart][l]	:= peakStream48[i*(fsQuart*fsQuart*3) + j*(fsQuart*3) + k*(3) + l];
	    			end
	    		end
	    	end
	    end
	    
	    foreach uint(size=16) i in 0 .. (imageWidth-1) do
	    	foreach uint(size=16) j in 0 .. (imageHeight-1) do
	    	    outputR[j*imageHeight + i] := peaks[imgR[i + (j*imageWidth)]/FSdiv][imgG[i + (j*imageWidth)]/FSdiv][imgB[i + (j*imageWidth)]/FSdiv][0]*FSdiv;
	    	    outputG[j*imageHeight + i] := peaks[imgR[i + (j*imageWidth)]/FSdiv][imgG[i + (j*imageWidth)]/FSdiv][imgB[i + (j*imageWidth)]/FSdiv][1]*FSdiv;
	    	    outputB[j*imageHeight + i] := peaks[imgR[i + (j*imageWidth)]/FSdiv][imgG[i + (j*imageWidth)]/FSdiv][imgB[i + (j*imageWidth)]/FSdiv][2]*FSdiv;
	    	end
	    end 
	    
	end
	
end