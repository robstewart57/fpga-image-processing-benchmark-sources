
/* read a 512x512 RGB image */
img1 = imread RGB 512 512;

/* peaks is a 5D data structure of the RGB image values + X/Y counts */
peaks =
  fold
  genarray(512,512,5)    // generate a 5D feature space state to fold through
  range(512,512)         // range to fold over
  (\(peaksRGB) (i,j) ->  // user defined function lambda arguments

  /* local variables to the user defined function */
  int rVal, gVal, bVal, xVal, yVal, norm, count, recur, spatialWindow, width, height;
  bool peakFound;

  peaksRGB[i,j,0] = img1[i,j,0];
  peaksRGB[i,j,1] = img1[i,j,1];
  peaksRGB[i,j,2] = img1[i,j,2];
  peaksRGB[i,j,3] = i;
  peaksRGB[i,j,4] = j;

  peakFound = false;
  count = 0;
  recur = 5;
  spatialWindow = 10;

   /* mean shift convergence recursion */
   while ((count < recur) and (peakFound == false)) {
   count++;
   rVal = 0;
   gVal = 0;
   bVal = 0;
   xVal = 0;
   yVal = 0;
   norm = 0;
   height = 512;
   width  = 512;

   /* for each point within chosen window, find center of mass */
   for k in range((-1)*spatialWindow,spatialWindow) {
       for l in range((-1)*spatialWindow,spatialWindow) {
           // if the point in within a circle of the center
           if (l*l+k*k <= spatialWindow*spatialWindow){
             // if the point is within the image
             if ((k+peaksRGB[i,j,3] < width) and (k+peaksRGB[i,j,3] >= 0)
                 and (l+peaksRGB[i,j,4] < height) and (l+peaksRGB[i,j,4] >= 0)) {
               // if point is within RGB window
               if ( (peaksRGB[i,j,0]
                     - img1[peaksRGB[i,j,3]+k ,
                                  peaksRGB[i,j,4]+l ,
                                  0])
                    * (peaksRGB[i,j,0]
                       - img1[peaksRGB[i,j,3]+k ,
                                    peaksRGB[i,j,4]+l ,
                                    0])
                    + (peaksRGB[i,j,1]
                       - img1[peaksRGB[i,j,3]+k ,
                                    peaksRGB[i,j,4]+l ,
                                    1])
                    * (peaksRGB[i,j,1]
                       - img1[peaksRGB[i,j,3]+k ,
                                    peaksRGB[i,j,4]+l ,
                                    1])
                    + (peaksRGB[i,j,2]
                       - img1[peaksRGB[i,j,3]+k ,
                                    peaksRGB[i,j,4]+l ,
                                    2])
                    * (peaksRGB[i,j,2]
                       - img1[peaksRGB[i,j,3]+k ,
                                    peaksRGB[i,j,4]+l ,
                                    2])
                    <= 20*20
                    ) {

                 // update values of 5-vector
                 rVal += img1[peaksRGB[i,j,3]+k , peaksRGB[i,j,4]+l , 0] - peaksRGB[i,j,0];
                 gVal += img1[peaksRGB[i,j,3]+k , peaksRGB[i,j,4]+l , 1] - peaksRGB[i,j,1];
                 bVal += img1[peaksRGB[i,j,3]+k , peaksRGB[i,j,4]+l , 2] - peaksRGB[i,j,2];
                 xVal += k;
                 yVal += l;
                 norm++;
               }
             }
           }
         }
     }

   // update value of each peak in
   if (norm != 0 ) {
     peaksRGB[i,j,0] += (rVal/norm);
     peaksRGB[i,j,1] += (gVal/norm);
     peaksRGB[i,j,2] += (bVal/norm);
     peaksRGB[i,j,3] += (xVal/norm);
     peaksRGB[i,j,4] += (yVal/norm);
   }

   // check if current point is the peak
   peakFound = (rVal==0) and (gVal==0) and (bVal==0);
}

);

/* extract the RGB image from the 1st 3 dimensions of the 5D peaks structure */
img2 =
  fold
  rgb(512,512)       // generate a 3D image space state to fold through
  range(512,512)     // range to fold over
  (\(image) (i,j) -> // user defined function lambda arguments
  image[i,j,0] = peaks[i,j,0];
  image[i,j,1] = peaks[i,j,1];
  image[i,j,2] = peaks[i,j,2];
);

/* output the mean shifted RGB image */
out img2;
