/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: 

package data_par_try1;
 
 
actor getPeak() uint(size=8) inFS ==> uint(size=8) outPeaks :

	uint(size=8) windowSize = 15; // 42;
	/* how many row/column elements have been consumed */
	uint(size=8) outputPeaks [128*128*128*3];
	
	int(size=16) rVal;
	int(size=16) gVal;
    int(size=16) bVal;
	int(size=16) rMove;
	int(size=16) gMove;
	int(size=16) bMove;
	int(size=8) sign;
	uint(size=16) norm;
	
	uint(size=8) count := 0;
	bool peakFound;
	/*  */
	int(size=16) movements[256][256][256][3];
	
	
	//bufferRows: 
	action inFS:[ inputFS ] repeat (128+2*windowSize)*(128+2*windowSize)*(128+2*windowSize) ==> outPeaks:[outputPeaks] repeat 128*128*128*3
	do
	    println("in FS segment");
	    
	    /* each value in featureSpace */
	    foreach uint(size=16) i in 0 .. (128+2*windowSize) do
	    	foreach uint(size=16) j in 0 .. (128+2*windowSize) do
	    		foreach uint(size=16) k in 0 .. (128+2*windowSize) do
	    			//
			    	if (inputFS[(windowSize+k)*(128+2*windowSize)+(windowSize+j)*(128+2*windowSize)+i+windowSize] > 0) then
			    		peakFound := false;
			    		count := 0;
			    		while (count < 30 && peakFound = false) do
			    			count := count +1;
			    			rVal := 0;
			    			gVal := 0;
			    			bVal := 0;
					    	rMove := 0;
					    	gMove := 0;
					    	bMove := 0;
					    	norm := 0;
					    	foreach uint(size=16) l in 1 .. windowSize do
					    		foreach uint(size=16) m in 1 .. windowSize do
					    			foreach uint(size=16) n in 1 .. windowSize do
					    				if (l*l+m*m+n*n <= windowSize*windowSize) then
					    					if(inputFS[(k+windowSize-n)*(128+2*windowSize)+(j+windowSize-m)*(128+2*windowSize)+ i+windowSize-l] != 0 || inputFS[(k+windowSize+n)*(128+2*windowSize)+(j+windowSize+m)*(128+2*windowSize)+ i+windowSize+l] != 0) then
									    	 	rVal := rVal - l*inputFS[(k+windowSize+movements[i][j][k][2]-n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]-m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]-l]
									    					+ l*inputFS[(k+windowSize+movements[i][j][k][2]+n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]+m)*(128+2*windowSize) + i+windowSize+movements[i][j][k][0]+l];
					    						gVal := gVal - m*inputFS[(k+windowSize+movements[i][j][k][2]-n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]-m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]-l]
					    									+ m*inputFS[(k+windowSize+movements[i][j][k][2]+n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]+m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]+l];
					    						bVal := bVal - n*inputFS[(k+windowSize+movements[i][j][k][2]-n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]-m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]-l]									    		
					    									+ n*inputFS[(k+windowSize+movements[i][j][k][2]+n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]+m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]+l];
									    		
									    		norm := norm + inputFS[(k+windowSize+movements[i][j][k][2]-n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]-m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]-l]
									    				+ inputFS[(k+windowSize+movements[i][j][k][2]-n)*(128+2*windowSize)+(j+windowSize+movements[i][j][k][1]-m)*(128+2*windowSize)+i+windowSize+movements[i][j][k][0]+l];
					    					end
					    				end
					    			end
					    		end		
					    	end
					    	if (norm != 0) then
					    		//R
					    		sign := 1;
					    		if (rVal <0) then
					    			sign := -1;
					    		end
					    		foreach int(size=8) x in 1 .. windowSize do
					    			if ((sign*2*rVal) > (x*2-1)*norm) then
					    			rMove := sign*x;
					   				end
					   			end
					   			//G
					    		sign := 1;
					    		if (gVal <0) then
					    			sign := -1;
					    		end
					    		foreach int(size=8) x in 1 .. windowSize do
					    			if ((sign*2*gVal) > (x*2-1)*norm) then
					    			gMove := sign*x;
					   				end
					   			end
					   			//B
								sign := 1;
					    		if (bVal <0) then
					    			sign := -1;
					    		end
					    		foreach int(size=8) x in 1 .. windowSize do
					    			if ((sign*2*bVal) > (x*2-1)*norm) then
					    			bMove := sign*x;
					   				end
					   			end
					   		end
					   		if (rMove =0 && gMove =0 && bMove =0 ) then
					   			peakFound := true;
					   		end
					   		
					   		// println("rMove: " + rMove);
					   		movements[i][j][k][0] := movements[i][j][k][0] + rMove;
					   		movements[i][j][k][1] := movements[i][j][k][1] + gMove;
					   		movements[i][j][k][2] := movements[i][j][k][2] + bMove;
		   					
		   				end // end of while
		   				
		   				outputPeaks[128*i +128*j +128*k   ] := i + movements[i][j][k][0];
		   				outputPeaks[128*i +128*j +128*k +1] := i + movements[i][j][k][0];
		   				outputPeaks[128*i +128*j +128*k +2] := i + movements[i][j][k][0];
		   				
		   				//outputPeaks[(128+2*windowSize)*i +(128+2*windowSize)*j +(128+2*windowSize)*k   ] := i + movements[i][j][k][0];
		   				//outputPeaks[(128+2*windowSize)*i +(128+2*windowSize)*j +(128+2*windowSize)*k +1] := i + movements[i][j][k][0];
		   				//outputPeaks[(128+2*windowSize)*i +(128+2*windowSize)*j +(128+2*windowSize)*k +2] := i + movements[i][j][k][0];
		   				
		   			end
	   			end
	   		end
	   	end
	   	//***************************************************************************************************
	   	println("peaks populated");	
	end
	
end
