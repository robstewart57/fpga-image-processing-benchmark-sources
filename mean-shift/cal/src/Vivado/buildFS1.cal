/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Kirsty Duncan


package Vivado;
import image.constants.constants.*;
 
actor buildFS1() uint(size=8) R, uint(size=8) G, uint(size=8) B ==> uint(size=8) FSout, uint(size=8) Rout, uint(size=8) Gout, uint(size=8) Bout :

	/* constants */
	uint(size=16) imageWidth = IM_WIDTH;
	uint(size=16) imageHeight = IM_HEIGHT;
	uint(size=8) fsSize = FS_SIZE;
	uint(size=8) fsDiv = 256/fsSize;
	/* how many row/column elements have been consumed */
	uint(size=16) xCount := 0;
	uint(size=16) yCount := 0;
	uint(size=16) zCount := 0;
	uint(size=16) aCount := 0;
	/* output */
	uint(size=8) imgR;
	uint(size=8) imgG;
	uint(size=8) imgB;
	uint(size=8) bound [6];
	uint(size=8) out;
	uint(size=8) featureSpace [fsSize][fsSize][fsSize];
	
	
	// store the input image in an array
	getRGB: action R:[arrayValR], G:[arrayValG], B:[arrayValB] ==> Rout:[imgR], Gout:[imgG], Bout:[imgB]
	do
		// output RGB values
		imgR := arrayValR;
		imgG := arrayValG;
		imgB := arrayValB;
		//add value to feature space
		featureSpace[(arrayValR/fsDiv)] [(arrayValG/fsDiv)] [(arrayValB/fsDiv)] := featureSpace[(arrayValR/fsDiv)] [(arrayValG/fsDiv)] [(arrayValB/fsDiv)] + 1;
		
		xCount := xCount + 1;
		
		if (xCount = imageWidth) then
			yCount := yCount + 1;
			xCount := 0;
		end
	end

	//fill feature space array
	buildFS: action ==>
	guard yCount = imageHeight
	do
	    bound[0] := 0;
		bound[1] := 0;
		bound[2] := 0;
		bound[3] := fsSize-1;
		bound[4] := fsSize-1;
		bound[5] := fsSize-1;
		
		xCount := 0;
		yCount := 0;
		zCount := 0;
		aCount := 0;
	end
	
	
	// output the feature space
	outputFS: action ==> FSout:[out]
	do
	
		if (zCount = fsSize) then
			out := bound[aCount];
			aCount := aCount+ 1;
		else
			out := featureSpace[xCount][yCount][zCount];
			xCount := xCount + 1;
			if (xCount = fsSize) then
				yCount := yCount + 1;
				xCount := 0;
			end
			if (yCount = fsSize) then
				zCount := zCount + 1;
				yCount := 0;
			end
		end
	end
		
	
	//when the full image has been output, stop
	doneFS: action ==>
	guard aCount= 6
	do
		xCount := 0;
		yCount := 0;
		zCount := 0;
		aCount := 0;
	end
	
	// schedule
	schedule fsm s0 :
		s0 (getRGB) --> s0;
   		s0 (buildFS) --> s1;   
   		s1 (outputFS) --> s1;
		s1 (doneFS) --> s0;		 					
	end
	
	priority		
		buildFS > getRGB;	
		doneFS > outputFS;		
	end

end