/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Kirsty Duncan

package Vivado;
import image.constants.constants.*;
import image.constants.constants_par.*;
 
 //***********************************************
actor createOutput6() uint(size=8) P1, uint(size=8) P2,  uint(size=8) P3, uint(size=8) P4,
uint(size=8) P5, uint(size=8) P6,
uint(size=8) R, uint(size=8) G, uint(size=8) B ==> uint(size=8) Rout, uint(size=8) Gout, uint(size=8) Bout :


	/* constants */
	uint(size=16) imageWidth = IM_WIDTH;
	uint(size=16) imageHeight = IM_HEIGHT;
	uint(size=8) fsSize = FS_SIZE;
	uint(size=8) fsDiv = 256/fsSize;
	/* how many FS peaks elements have been consumed */
	uint(size=16) xCount := 0;
	uint(size=16) yCount := 0;
	uint(size=16) zCount := 0;
	uint(size=16) aCount := 0;
	uint(size=24) nCount := 0;
	uint(size=24) fCount := 0;
	uint(size=4) boundsSent := 0;
	/* output */
	uint(size=8) imgR;
	uint(size=8) imgG;
	uint(size=8) imgB;
	/* peaks */
	int(size=16) peaks[fsSize][fsSize][fsSize][3];
	int(size=8)  pIn[par];
	/* segment feature space */
	uint(size=8) bound[par][6];
	uint(size=8) maxWidth[3];
	uint(size=8) par := PAR6; //***
	uint(size=8) xDiv := XDIV6; //***
	uint(size=8) yDiv := YDIV6; //***
	uint(size=8) zDiv := ZDIV6; //***
	
	
	// store the input peaks in an array
	getLimits: action P1:[arrayVal1], P2:[arrayVal2], P3:[arrayVal3], P4:[arrayVal4],
	P5:[arrayVal5], P6:[arrayVal6] ==>
	do
		fCount := fCount+1;
		if (boundsSent < 3) then 
			maxWidth[boundsSent] := arrayVal1;
			boundsSent := boundsSent +1;
		else
		//*************************
		println("bound[0]["+(boundsSent-3)+"]: "+arrayVal1+", bound[1]["+(boundsSent-3)+"]: "+arrayVal2+", bound[2]["+(boundsSent-3)+"]: "+arrayVal3);
		println("bound[3]["+(boundsSent-3)+"]: "+arrayVal4+", bound[4]["+(boundsSent-3)+"]: "+arrayVal5+", bound[5]["+(boundsSent-3)+"]: "+arrayVal6);
			bound[0][boundsSent-3] := arrayVal1;
			bound[1][boundsSent-3] := arrayVal2;
			bound[2][boundsSent-3] := arrayVal3;
			bound[3][boundsSent-3] := arrayVal4;
			bound[4][boundsSent-3] := arrayVal5;
			bound[5][boundsSent-3] := arrayVal6;
			boundsSent := boundsSent +1;
		end
	end
	
	limitsDone: action ==>
	guard boundsSent = 9
	do
		//move on to storing peak values
		println("limitsDone " + fCount);
		boundsSent := 0;
		println(boundsSent);
			println(bound[0][0]+", "+bound[0][1]+", "+bound[0][2]);
			println(bound[1][0]+", "+bound[1][1]+", "+bound[1][2]);
			println(bound[2][0]+", "+bound[2][1]+", "+bound[2][2]);
			println(bound[3][0]+", "+bound[3][1]+", "+bound[3][2]);
			println(bound[4][0]+", "+bound[4][1]+", "+bound[4][2]);
			println(bound[5][0]+", "+bound[5][1]+", "+bound[5][2]);
				
	end
	
	// store the input peaks in an array
	getPeaks: action P1:[arrayVal1], P2:[arrayVal2], P3:[arrayVal3], P4:[arrayVal4],
	P5:[arrayVal5], P6:[arrayVal6] ==>
	do
		//*************************
			pIn[0]	:= arrayVal1;
			pIn[1]	:= arrayVal2;
			pIn[2]	:= arrayVal3;
			pIn[3]	:= arrayVal4;
			pIn[4]	:= arrayVal5;
			pIn[5]	:= arrayVal6;
			
			foreach uint(size=8) l in 0 .. par-1 do
				if (pIn[l] > 0) then
					peaks[xCount+bound[l][0]][yCount+bound[l][1]][zCount+bound[l][2]][aCount] := pIn[l];
				end
			end

			aCount := aCount + 1;
			
			if (aCount = 3) then
				xCount := xCount + 1;
				aCount := 0;
			end
			if (xCount = maxWidth[0]) then
				yCount := yCount + 1;
				xCount := 0;
			end
			if (yCount = maxWidth[1]) then
				zCount := zCount + 1;
				yCount := 0;
			end
			
		//end
		nCount := nCount +1;
		fCount := fCount+1;
	end
	
	//stop when peaks are done
	donePeaks: action ==>
	guard zCount = maxWidth[2]
	do
		println("ok done " +fCount);
		xCount := 0;
		yCount := 0;
		zCount := 0;
		aCount := 0;
		nCount := 0;
	end
	
	// store the input image in an array and output the corrected image
	getRGB: action R:[arrayValR], G:[arrayValG], B:[arrayValB] ==> Rout:[imgR], Gout:[imgG], Bout:[imgB]
	do
		// output corrected RGB values
		imgR := peaks[arrayValR/fsDiv][arrayValG/fsDiv][arrayValB/fsDiv][0]*fsDiv;
		imgG := peaks[arrayValR/fsDiv][arrayValG/fsDiv][arrayValB/fsDiv][1]*fsDiv;
		imgB := peaks[arrayValR/fsDiv][arrayValG/fsDiv][arrayValB/fsDiv][2]*fsDiv;
		
		xCount := xCount + 1;
		
		if (xCount = imageWidth) then
			yCount := yCount + 1;
			xCount := 0;
			
		end
	end
	
	//when the full image has been output, stop
	doneRGB: action ==>
	guard yCount = imageHeight
	do
	println("doneRGB");
		xCount := 0;
		yCount := 0;
	end
	
	// schedule
	schedule fsm s0 :
		s0 (getLimits) --> s0;
		s0 (limitsDone) --> s1;
		s1 (getPeaks) --> s1;
   		s1 (donePeaks) --> s2;   
   		s2 (getRGB) --> s2;
		s2 (doneRGB) --> s0;		 					
	end
	
	priority
		limitsDone > getLimits;	
		donePeaks > getPeaks;
		doneRGB > getRGB;	
	end
	
end