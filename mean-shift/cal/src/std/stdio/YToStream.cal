/*
 * Copyright (c) 2014-2016, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk>, 
//       , Rob Stewart <R.Stewart@hw.ac.uk>

package std.stdio;

import image.constants.constants.*;

actor YToStream() uint(size=8) Y ==> uint(size=8) YUV: 
	
	uint(size=8)  pictureBufferYUV[IM_WIDTH_OUT * IM_HEIGHT_OUT];	
	int (size=16) pictureWidthLuma := IM_WIDTH_OUT;
	int (size=16) pictureHeightLuma := IM_HEIGHT_OUT;		
	int count := 0;
	int write_idx := 0;
	// bool sending := false;
        int(size=16) twoFiveFive = 255;
        int(size=16) zero = 0;

        /***************************************/
        procedure floor_c(int num)
        var int i := 0
        begin
                while(num >= 0) do 
                        i := i+1;
                        num := num-1;
                end
                
                Val_UINT8 := clip_i32_u8(i);
        end
        uint(size=8) Val_UINT8;
        /***************************************/

function clip_i32_u8(int(size=32) Value)
				-->
			int(size=32)
		:
			if (Value & (~0xFF)) != 0 then 
			  (-Value) >> 31
            else 
              Value 
            end
		end

    
                 
	getPixValueY: action Y:[Bytes] ==>
	guard count < (pictureWidthLuma * pictureHeightLuma)
	do      // floor_c(if Bytes > 255 then 255 else if Bytes < 0 then 0 else Bytes end end);
                floor_c(if Bytes > 255 then 255 else if Bytes < 0 then 0 else Bytes end end);
                pictureBufferYUV[count] := Val_UINT8;
                // pictureBufferYUV[count] := Bytes;
                count := count + 1;
	end


	doneCount: action ==> 
	guard count = pictureWidthLuma * pictureHeightLuma
	do
	  write_idx := 0;
	end		

	send: action ==> YUV:[v] 
	guard 
		write_idx < IM_WIDTH_OUT * IM_HEIGHT_OUT * 3
	var
		uint(size=8) v
	do
		v := pictureBufferYUV[write_idx mod (IM_WIDTH_OUT * IM_HEIGHT_OUT)];
		write_idx := write_idx + 1;
	end
	
	done: action ==>
	guard
		write_idx = IM_WIDTH_OUT * IM_HEIGHT_OUT * 3
	do
		write_idx := 0;
	 	count := 0;	
	end
	
	schedule fsm s0 :
	s0 (getPixValueY) --> s0;
	s0 (doneCount) --> s1;
	s1 (send) --> s1;
	s1 (done) --> s0;
	end
	
//	priority
//		doneCount > getPixValueY;
//		send.done > send;
//	end
	

end


